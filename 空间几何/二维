//**************************************************************************
struct Point;
typedef Point Vector;
const double eps = 1e-10;
struct Point {
    double x=0.0f, y=0.0f;
    Point() = default;
    Point(double x,double y):x(x),y(y){}
    //****************************************************
    bool operator<(const Point& rhs) const {
        return x < rhs.x || (x == rhs.x && y < rhs.y);
    }
};

//***********************  定义运算符  **************************************
Vector operator+(Vector A, Vector B) { return Vector(A.x + B.x, A.y + B.y); }
Vector operator-(Vector A, Vector B) { return Vector(A.x - B.x, A.y - B.y); }
Vector operator*(Vector A, double p) { return Vector(A.x * p, A.y * p); }
Vector operator/(Vector A, double p) { return Vector(A.x / p, A.y / p); }
int dcmp(double x) { if (fabs(x) < eps) return 0;  return x < 0 ? -1 : 1; }
bool operator==(const Point& lhs, const Point& rhs) {
    return dcmp(lhs.x - rhs.x) == 0 && dcmp(lhs.y - rhs.y) == 0;
}
bool operator!=(const Point& lhs, const Point& rhs) { return !(lhs == rhs); }
void read(Point& P) { scanf("%lf%lf", &P.x, &P.y); }
//-------------------------------------------------------------------------

//************************ 定义基本运算 **************************************
double Dot(Vector A, Vector B) { return A.x * B.x + A.y * B.y; } //点积
double Length(Vector A) { return sqrt(Dot(A, A)); }              //向量长度
double Angle(Vector A, Vector B) { return acos(Dot(A, B) / Length(A) / Length(B)); }//两向量角度
double Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; }//叉积
double Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); }
Vector Rotate(Vector A, double rad) { //绕起点旋转
    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad));
}
Vector Normal(Vector A) {  //求单位法向量，确保使用前不是零向量
    double L = Length(A);
    return Vector(-A.y / L, A.x / L);
}
//-------------------------------------------------------------------------

//************************ 点和直线 *****************************************
//两直线交点
Point GetLineIntersection(Point P, Vector v, Point Q, Vector w) {
    Vector u = P - Q;
    double t = Cross(w, u) / Cross(v, w);
    return P + v * t;
}  
//点到直线的距离
double DistanceToLine(Point P, Point A, Point B) {
    Vector v1 = B - A, v2 = P - A;
    return fabs(Cross(v1, v2) / Length(v1));
}
//点到线段的距离
double DistanceToSegment(Point P, Point A, Point B) {
    if (A == B) return Length(P - A);
    Vector v1 = B - A, v2 = P - A, v3 = P - B;
    if (dcmp(Dot(v1, v2)) < 0)  return Length(v2);
    else if (dcmp(Dot(v1, v3)) > 0) return Length(v3);
    else return fabs(Cross(v1, v2)) / Length(v1);
}
//点到直线上的投影
Point GetLineProjection(Point P, Point A, Point B) {
    Vector v = B - A;
    return A + v * (Dot(v, P - A) / Dot(v, v));
}
//判断线段是否规范相交
bool SegmentProperIntersection(Point a1, Point a2, Point b1, Point b2) {
    double c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1),
        c3 = Cross(b2 - b1, a1 - b1), c4 = Cross(b2 - b1, a2 - b1);
    return dcmp(c1) * dcmp(c2) < 0 && dcmp(c3) * dcmp(c4) < 0;
}
//判断点是否在线段上
bool onSegment(Point p, Point a1, Point a2) {
    return dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) < 0;
}
//多边形面积
double PloygonArea(Point* p, int n) {
    double ans = 0;
    for (int i = 1; i < n - 1; ++i)
        ans += Cross(p[i] - p[0], p[i + 1] - p[0]);
    return ans / 2;
}
//-------------------------------------------------------------------------

//***************************  圆  ****************************************
struct Circle {
	Point c;
	double r;
	Circle(Point c, double r) :c(c), r(r) {}
	Point point(double a) {//求以圆心为极角的点
		return Point(c.x + r * cos(a), c.y + r * sin(a));
	}  //圆上的点以极角来唯一确定
};

struct Line {
	Point p;  Vector v;
	Line(const Point& p, const Vector& v) :v(v), p(p) {}
	Point point(double t) { return p + v * t; }
};

//! @brief 求线圆 交点
//! @param L      直线  点向式表示
//! @param C      圆    圆形  半径  表示
//! @param t1 t2  交点对于直线的参数
//! @param sol    交点集合
//! @return       相交情况
int getLineCircleIntersection(Line L, Circle C, double& t1, double& t2, vector<Point>& sol) {
	double a = L.v.x, b = L.p.x - C.c.x, c = L.v.y, d = L.p.y - C.c.y;
	double e = a * a + c * c, f = 2 * (a * b + c * d), g = b * b + d * d - C.r * C.r;
	double delta = f * f - 4 * e * g;
	if (dcmp(delta) < 0) return 0;
	if (dcmp(delta) == 0) {
		t1 = t2 = -f / (2 * e); sol.push_back(L.point(t1));
		return 1;
	}
	t1 = (-f - sqrt(delta)) / (2 * e); sol.push_back(L.point(t1));
	t2 = (-f + sqrt(delta)) / (2 * e); sol.push_back(L.point(t2));
	return 2;
}

double angle(const Vector& v) { return atan2(v.y, v.x); } //求向量的极角

//! @brief 两园的交点
//! @param sol  交点集合
//! @return 交点个数   ，-1 表示两园相等
int getCircleCircleIntersection(Circle c1, Circle c2, vector<Point>& sol) {
	double d = Length(c1.c - c2.c);
	if (dcmp(d) == 0) {
		if (dcmp(c1.r - c2.r) == 0)  return -1;//两园重合
		return 0;
	}
	if (dcmp(c1.r + c2.r - d) < 0)  return 0;
	if (dcmp(fabs(c1.r - c2.r) - d) > 0)  return 0;

	double a = angle(c2.c - c1.c);
	double da = acos((c1.r * c1.r + d * d - c2.r * c2.r) / (2 * c1.r * d));

	Point p1 = c1.point(a - da), p2 = c1.point(a + da);

	sol.push_back(p1);
	if (p1 == p2)  return 1;
	sol.push_back(p2);
	return 2;
}

//点  园的切线
int getTangents(const Point& p, const Circle& c, Vector* v) {
	Vector u = c.c - p;
	double dist = Length(u);
	if (dist < c.r)  return 0;
	else if (dcmp(dist - c.r) == 0) {
		v[0] = Rotate(u, PI / 2);  return 1;
	}
	else {
		double ang = asin(c.r / dist);
		v[0] = Rotate(u, -ang);
		v[1] = Rotate(u, +ang);
		return 2;
	}
}

//两园的切线
int getTangents(Circle& A, Circle& B, Point* a, Point* b) {
	int cnt = 0;
	if (A.r < B.r) { swap(A, B); swap(a, b); }
	double d2 = (A.c.x - B.c.x) * (A.c.x - B.c.x) + (A.c.y - B.c.y) * (A.c.y - B.c.y);
	double rdiff = A.r - B.r;
	double rsum = A.r + B.r;
	if (d2 < rdiff * rdiff) return 0;

	double base = atan2(B.c.y - A.c.y, B.c.x - A.c.x);
	//同园
	if (!dcmp(d2) && !dcmp(A.r - B.r))  return -1;
	if (!dcmp(d2 - rdiff * rdiff)) {
		a[cnt] = A.point(base); b[cnt] = B.point(base); cnt++;
		return 1;
	}
	//有外  共切线
	double ang = acos((A.r - B.r) / sqrt(d2));
	a[cnt] = A.point(base + ang); b[cnt] = B.point(base + ang); cnt++;
	a[cnt] = A.point(base - ang); b[cnt] = B.point(base - ang); cnt++;
	if (!dcmp(d2 - rsum * rsum)) {
		a[cnt] = A.point(base); b[cnt] = B.point(base + PI); cnt++;
	}
	else if (d2 > rsum * rsum) {
		double ang = acos((A.r + B.r) / sqrt(d2));
		a[cnt] = A.point(base + ang); b[cnt] = B.point(PI + base + ang); cnt++;
		a[cnt] = A.point(base - ang); b[cnt] = B.point(PI + base - ang); cnt++;
	}
	return cnt;
}
//-----------------------------------------------------------------------------


