const double EPS = 1e-8;
typedef vector<double> vec;
typedef vector<vec> mat;
//下标从 1 开始
vec gauss_jordan(const mat& A, vec& b) {
	int n = A.size() - 1;
	mat B(n+1, vec(n + 2));
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= n; ++j) B[i][j] = A[i][j];
	for (int i = 1; i <= n; ++i) B[i][n + 1] = b[i];
	for (int i = 1; i <= n; ++i) {
		int pivot = i;
		for (int j = i + 1; j <= n; ++j) if (abs(B[j][i]) > B[pivot][i]) pivot = j;
		swap(B[i], B[pivot]);
		if (abs(B[i][i]) < EPS)  return vec();

		for (int j = i + 1; j <= n + 1; ++j) B[i][j] /= B[i][i];
		for (int j = 1; j <= n; ++j) if (i != j) {
			for (int k = i + 1; k <= n + 1; ++k) B[j][k] -= B[i][k] * B[j][i];
		}
	}
	vec x(n + 1);
	for (int i = 1; i <= n; ++i) x[i] = B[i][n + 1];
	return x;
}
