#include<iostream>
#include<vector>
#include<algorithm>
using namespace::std;

const int maxn = 2e5 + 7;

int a[maxn];
int n, m; 
//数组元素个数  询问次数

//! 与普通线段树不同的是：权值线段树 维护的是整个数组的信息，且其节点表示的是整个数组，值在[L R)内的元素个数
//！则建立多个树，每个树代表一个数组前缀，则就可以查询到数组的某个区间的信息
//！许多树共用相同的节点，每加一颗树，在树上只增加了 log 个节点

//！使用方法
//! 初始化只需要提供数组 a 和 长度 n, 然后调用 SST::init()  即可。查询  就直接调用 ask1  ask2;
//! 数组下标从 1 开始
namespace SST {
	struct node {
		int ls, rs, sum;
	};
	node  tr[(maxn << 5) + 7];
	int rt[maxn], inx[maxn], len, tot;
	inline int getid(const int& val) {
		return lower_bound(inx + 1, inx + len + 1, val) - inx;
	}
	//! @brief 对空区间建立权值线段树
	//! @param l r  该节点对应的值域
	//! @return 根节点
	int build(int l, int r) {
		int root = ++tot;
		if (l == r) return root;
		int mid = l + ((r - l) >> 1);
		tr[root].ls = build(l, mid);
		tr[root].rs = build(mid + 1, r);
		return root;
	}


	//! @brief      扩展一位
	//! @param k    新增的元素的值
	//! @param l r  该节点对应的值域
	//! @param root 前缀对应的根节点
	int update(int k, int l, int r, int root) {
		int dir = ++tot;
		tr[dir].ls = tr[root].ls, tr[dir].rs = tr[root].rs;
		tr[dir].sum = tr[root].sum + 1;
		if (l == r)  return dir;
		int mid = l + ((r - l) >> 1);
		if (k <= mid) tr[dir].ls = update(k, l, mid, tr[dir].ls);
		else tr[dir].rs = update(k, mid + 1, r, tr[dir].rs);
		return dir;
	}

	inline void init() {
		memcpy(inx, a, sizeof(inx));
		sort(inx + 1, inx + 1 + n);
		len = unique(inx + 1, inx + 1 + n) - inx - 1;
		rt[0] = build(1, len);
		for (int i = 1; i <= n; ++i) rt[i] = update(getid(a[i]), 1, len, rt[i - 1]);
	}
	
	//u,v 代表不同的前缀对应的树节点  ，l, r 对应值域范围
	int query2(int u, int v, int l, int r) {
		if (ql <= l && r <= qr) return tr[v].sum - tr[u].sum;
		int mid = l + ((r - l) >> 1);
		int ans = 0;
		if (ql <= mid)  ans += query2(tr[u].ls, tr[v].ls, l, mid);
		if (qr > mid) ans += query2(tr[u].rs, tr[v].rs, mid + 1, r);
		return ans;
	}

	//查询某区间 某值域 内元素的个数
	int ask2(int l, int r, int down, int up) {
		ql = getid(down), qr = getid(up);
		return query2(rt[l - 1], rt[r], 1, len);
	}

	//查询区间 第k小  最终会卡逼到单点
	int query1(int u, int v, int l, int r, int k) {
		if (l == r)  return l;
		int mid = l + ((r - l) >> 1);
		int pre1 = tr[tr[u].ls].sum; //前缀1 的值在【l,mid】 的元素个数
		int pre2 = tr[tr[v].ls].sum; //前缀2 的值在【l,mid】 的元素个数
		if (pre2 - pre1 < k) return query1(tr[u].rs, tr[v].rs, mid + 1, r, k - pre2 + pre1);
		else return query1(tr[u].ls, tr[v].ls, l, mid, k);
	}

	//查询区间第k小
	int ask1(int l, int r, int k) {
		int ans = query1(rt[l - 1], rt[r], 1, len, k);
		return inx[ans];
	}
}
void work() {
	int l, r, k;
	while (m-- > 0) {
		scanf("%d%d%d", &l, &r, &k);
		printf("%d\n", SST::inx[SST::query(SST::rt[l - 1], SST::rt[r], 1, SST::len, k)]);
	}
}

int main() {
	SST::init();
	work();
	return 0;
}
